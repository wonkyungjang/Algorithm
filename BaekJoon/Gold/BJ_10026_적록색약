import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class BJ_10026_적록색약 {

	static int N;
	static char[][] map1;
	static char[][] map2;
	static boolean[][] v1;
	static boolean[][] v2;
	static int normalcnt;
	static int weakcnt;
	static int[] dr= {-1,0,1,0};
	static int[] dc= {0,-1,0,1};
	public static void main(String[] args) throws NumberFormatException, IOException {
	BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	
	N=Integer.parseInt(br.readLine());
	map1=new char[N][N];
	map2=new char[N][N];
	v1=new boolean[N][N];
	v2=new boolean[N][N];
	for(int i=0;i<N;i++) {
		String s=br.readLine();
		char[] c=s.toCharArray();
		for(int j=0;j<N;j++) {
			//StringTokenizer st=new StringTokenizer(br.readLine(),""); //공백에만 사용
			map1[i][j]=c[j];
			map2[i][j]=c[j];
			if(map2[i][j]=='G')
				map2[i][j]='R';
		}
	}
	
	normalcnt=go(map1,v1,normalcnt);
	weakcnt=go(map2,v2,weakcnt);

	System.out.println(normalcnt+" "+weakcnt);

	}
	private static int go(char[][] map, boolean[][] v ,int cnt) {
		
		for(int i=0;i<N;i++) {
			for(int j=0;j<N;j++) {
				if(map[i][j]!='0') {
					char color=map[i][j];
					map[i][j]='0';
					dfs(map,v,i,j,color);
					cnt++;
				}
			}
		}
		return cnt;
	}
	private static void dfs(char map[][],boolean[][]v,int r, int c, char color) {
		v[r][c]=true;
	
		for(int d=0;d<4;d++) {
			int nr=r+dr[d];
			int nc=c+dc[d];
			
			if(!check(nr,nc)) continue;
			
			if(!v[nr][nc] && map[nr][nc]==color) {
				dfs(map,v,nr,nc,color);
				map[nr][nc]='0';
			}
		}
		//기저조건 다 트루고, 더이상 갈데가 없으면 return
		return;
	}
	
	private static boolean check(int nr, int nc) {
		return nr>=0 && nr<N && nc>=0 && nc<N;
	}
}
